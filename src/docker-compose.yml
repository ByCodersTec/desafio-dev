version: '3.4'

services:
  bycoderstec.storedataimporter:
    container_name: storeimporter-api
    image: ${DOCKER_REGISTRY-}bycoderstecstoredataimporter
    build:
      context: .
      dockerfile: ByCodersTec.StoreDataImporter/Dockerfile
    ports:
        - 8080:6002
    depends_on:
        - db
        - rabbitmq
    environment:
        - DB_HOST=db
        - DB_NAME=StoreImporter
        - DB_SA_PASSWORD=S3cur3P@ssW0rd!
        - ServicePort=8080

  app:
    container_name: app-ui
    image: app-ui
    build:
      context: ./storedataimporterui
      dockerfile: ./Dockerfile
      target: development
    volumes:
       - ./storedataimporterui:/app
       - /app/node_modules
    restart: always
    depends_on:
        - bycoderstec.storedataimporter
    stdin_open: true
    ports:
      - 3000:3000

  bycoderstec.storedataimporter.workerservice:
    container_name: storeimporter-worker
    image: ${DOCKER_REGISTRY-}bycoderstecstoredataimporterworkerservice
    build:
      context: .
      dockerfile: ByCodersTec.StoreDataImporter.WorkerService/Dockerfile
    depends_on:
        - db
        - rabbitmq
    environment:
        - DB_HOST=db
        - DB_NAME=StoreImporter
        - DB_SA_PASSWORD=S3cur3P@ssW0rd!
        - Development=True

  db:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    ports:
        - 8002:1433

    environment:
        SA_PASSWORD: "S3cur3P@ssW0rd!"
        ACCEPT_EULA: "Y"

  rabbitmq: # login guest:guest
    image: rabbitmq:3-management
    hostname: "rabbitmq"
    labels:
      NAME: "rabbitmq"
    ports:
        - "4369:4369"
        - "5671:5671"
        - "5672:5672"
        - "25672:25672"
        - "15671:15671"
        - "15672:15672"


  #ng-dev:
  #  container_name: ng-docker-app
  #  build:
  #    context: ./frontend
  #    dockerfile: Dockerfile
  #  volumes:
  #      - ./frontend:/app
  #      - /app/node_modules
  #  stdin_open: true
  #  ports:
  #    - "4200:4200"

  ui_app:
    image: ui_app
    ports:
      - 4200:4200
    command: "ng serve --host 0.0.0.0 --poll=2000 --port 4200 --disable-host-check"
    build:
      context: ./frontend
      dockerfile: Dockerfile    
    stdin_open: true
    volumes:
      - ./frontend/:/home/app
      - /home/app/node_modules


  bycoderstec.storedataimporter.oauth.identityserver:
    container_name: oauth-server
    image: ${DOCKER_REGISTRY-}bycoderstecstoredataimporteroauthidentityserver
    build:
      context: .
      dockerfile: ByCodersTec.StoreDataImporter.Oauth.IdentityServer/Dockerfile
    ports:
        - 5001:80
        - 5003:443
    depends_on:
        - db
        - rabbitmq

  elasticsearch:
    container_name: els
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - elastic

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.16.1
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://localhost:9200
    networks:
      - elastic
volumes:
  elasticsearch-data:

networks:
  elastic:
    driver: bridge
