let cors,dotenv,bodyParser,fileupload,ExpressSwagger,specification,layout,express,LogService,Controller;_fb8‍.x([["default",()=>_fb8‍.o]]);_fb8‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_fb8‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_fb8‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_fb8‍.w("express-fileupload",[["default",["fileupload"],function(v){fileupload=v}]]);_fb8‍.w("express-swagger-delta",[["default",["ExpressSwagger"],function(v){ExpressSwagger=v}]]);_fb8‍.w("./Swagger",[["specification",["specification"],function(v){specification=v}],["layout",["layout"],function(v){layout=v}]]);_fb8‍.w("express",[["default",["express"],function(v){express=v}]]);_fb8‍.w("../Services/LogService",[["default",["LogService"],function(v){LogService=v}]]);_fb8‍.w("../Controllers",[["*",null,function(v){Controller=v}]]);










class Server {
	setConfigs() {
		if ((process.env.NODE_ENV + '').trim() !== 'PRODUCTION')
			dotenv.config({
				path: './Env/Homolog',
			});

		ExpressSwagger.Server.NODE_ENV = process.env.NODE_ENV || process.env.ENVIRONMENT;
		ExpressSwagger.Server.BASE_HOST = process.env.BASE_HOST;
		ExpressSwagger.Server.BASE_PATH = process.env.BASE_PATH;
		ExpressSwagger.Server.PORT = process.env.PORT;

		ExpressSwagger.Server.setSwaggerProps({ layout: layout, specification: specification });

		ExpressSwagger.Server.serverApp.use(cors());
		ExpressSwagger.Server.serverApp.use(fileupload())
		ExpressSwagger.Server.serverApp.use(express.static("files"))
		ExpressSwagger.Server.serverApp.use(bodyParser.urlencoded({ extended: true }));
		ExpressSwagger.Server.serverApp.use(bodyParser.json());
		
		ExpressSwagger.Server.serverMiddleware = this.serverMiddleware;

		Controller.Upload.setRoutes();
		Controller.TipoTransacao.setRoutes();
	}
	serverMiddleware(req, res, callback) {
		if ((process.env.NODE_ENV + '').trim() !== 'PRODUCTION') {
			callback(req, res)
				.then((response) => LogService.addLogSuccess(req, res, response))
				.catch((error) => LogService.addLogError(req, res, error));

		} else {
			LogService.authorization(req.headers)
				.then((auth) => {
					if (auth.statusCode == 200) {
						callback(req, res)
							.then((response) => LogService.addLogSuccess(req, res, response))
							.catch((error) => LogService.addLogError(req, res, error));
					}
					else {
						return res
							.status(auth.statusCode)
							.json(auth);
					}
				})
				.catch((error) => LogService.addLogError(req, res, error));
		}
	}
	listen() {
		ExpressSwagger.Server.listen();
	}
}

_fb8‍.d(new Server());
