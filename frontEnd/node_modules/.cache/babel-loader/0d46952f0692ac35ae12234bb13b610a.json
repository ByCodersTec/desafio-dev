{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"defaultValue\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"error\", \"onChange\", \"required\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport FormControlUnstyledContext from './FormControlUnstyledContext';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport classes from './formControlUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Form control](https://mui.com/base/react-form-control/)\n *\n * API:\n *\n * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)\n */\n\n\nconst FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {\n  var _ref;\n\n  const {\n    defaultValue,\n    children,\n    className,\n    component,\n    components = {},\n    componentsProps = {},\n    disabled = false,\n    error = false,\n    onChange,\n    required = false,\n    value: incomingValue\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  });\n  const filled = hasValue(value);\n  const [focused, setFocused] = React.useState(false);\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n\n  const handleChange = event => {\n    setValue(event.target.value);\n    onChange == null ? void 0 : onChange(event);\n  };\n\n  const childContext = {\n    disabled,\n    error,\n    filled,\n    focused,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onChange: handleChange,\n    onFocus: () => {\n      setFocused(true);\n    },\n    required,\n    value: value != null ? value : ''\n  };\n  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n\n  const renderChildren = () => {\n    if (typeof children === 'function') {\n      return children(childContext);\n    }\n\n    return children;\n  };\n\n  return /*#__PURE__*/_jsx(FormControlUnstyledContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({\n      ref: ref\n    }, rootProps, {\n      className: clsx(classes.root, className, rootProps == null ? void 0 : rootProps.className, disabled && classes.disabled, error && classes.error, filled && classes.filled, focused && classes.focused, required && classes.required),\n      children: renderChildren()\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * @ignore\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlUnstyled;","map":{"version":3,"sources":["C:/Users/guilherme.cavenaghi/Documents/GitHub/bycodersDesafio/frontend/node_modules/@mui/base/FormControlUnstyled/FormControlUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_useControlled","useControlled","FormControlUnstyledContext","appendOwnerState","classes","jsx","_jsx","hasValue","value","Array","isArray","length","FormControlUnstyled","forwardRef","props","ref","_ref","defaultValue","children","className","component","components","componentsProps","disabled","error","onChange","required","incomingValue","other","setValue","controlled","default","name","state","filled","focused","setFocused","useState","ownerState","handleChange","event","target","childContext","onBlur","onFocus","Root","rootProps","root","renderChildren","Provider","process","env","NODE_ENV","propTypes","oneOfType","node","func","string","elementType","shape","object","any","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"defaultValue\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"error\", \"onChange\", \"required\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport FormControlUnstyledContext from './FormControlUnstyledContext';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport classes from './formControlUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Form control](https://mui.com/base/react-form-control/)\n *\n * API:\n *\n * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)\n */\n\n\nconst FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {\n  var _ref;\n\n  const {\n    defaultValue,\n    children,\n    className,\n    component,\n    components = {},\n    componentsProps = {},\n    disabled = false,\n    error = false,\n    onChange,\n    required = false,\n    value: incomingValue\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  });\n  const filled = hasValue(value);\n  const [focused, setFocused] = React.useState(false);\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n\n  const handleChange = event => {\n    setValue(event.target.value);\n    onChange == null ? void 0 : onChange(event);\n  };\n\n  const childContext = {\n    disabled,\n    error,\n    filled,\n    focused,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onChange: handleChange,\n    onFocus: () => {\n      setFocused(true);\n    },\n    required,\n    value: value != null ? value : ''\n  };\n  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n\n  const renderChildren = () => {\n    if (typeof children === 'function') {\n      return children(childContext);\n    }\n\n    return children;\n  };\n\n  return /*#__PURE__*/_jsx(FormControlUnstyledContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({\n      ref: ref\n    }, rootProps, {\n      className: clsx(classes.root, className, rootProps == null ? void 0 : rootProps.className, disabled && classes.disabled, error && classes.error, filled && classes.filled, focused && classes.focused, required && classes.required),\n      children: renderChildren()\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * @ignore\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlUnstyled;"]},"metadata":{},"sourceType":"module"}